.PHONY: help setup-backend init plan apply destroy validate fmt security-scan costs outputs clean promote-staging promote-prod rollback tag-version

# Configuration par d√©faut
ENV ?= dev
REGION ?= eu-west-1
PROJECT := accessweaver

# Couleurs pour l'affichage
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
PURPLE := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RESET := \033[0m

help: ## üìö Afficher l'aide
	@echo "$(CYAN)üèó AccessWeaver Infrastructure Commands$(RESET)"
	@echo ""
	@echo "$(YELLOW)üìã Commandes principales:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		sort | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üéØ Exemples d'utilisation:$(RESET)"
	@echo "  $(BLUE)make setup-backend ENV=dev$(RESET)     # Setup backend S3/DynamoDB"
	@echo "  $(BLUE)make deploy ENV=dev$(RESET)            # D√©ployer environnement dev"
	@echo "  $(BLUE)make costs ENV=prod$(RESET)            # Estimer co√ªts production"
	@echo ""
	@echo "$(YELLOW)üåç Environnements disponibles:$(RESET) dev, staging, prod"

setup-backend: ## üöÄ Setup backend S3/DynamoDB pour un environnement
	@echo "$(CYAN)üöÄ Setting up Terraform backend for $(ENV) environment$(RESET)"
	@if [ ! -f "scripts/setup-backend.sh" ]; then \
		echo "$(RED)‚ùå Script setup-backend.sh not found$(RESET)"; \
		exit 1; \
	fi
	@chmod +x scripts/setup-backend.sh
	@./scripts/setup-backend.sh $(ENV) $(REGION)
	@echo "$(GREEN)‚úÖ Backend setup completed$(RESET)"

init: ## üîß Initialiser Terraform pour un environnement
	@echo "$(CYAN)üîß Initializing Terraform for $(ENV)$(RESET)"
	@if [ ! -d "environments/$(ENV)" ]; then \
		echo "$(RED)‚ùå Environment $(ENV) does not exist$(RESET)"; \
		exit 1; \
	fi
	@cd environments/$(ENV) && terraform init
	@echo "$(GREEN)‚úÖ Terraform initialized$(RESET)"

plan: init ## üìã Planifier les changements pour un environnement
	@echo "$(CYAN)üìã Planning changes for $(ENV)$(RESET)"
	@cd environments/$(ENV) && terraform plan -out=terraform.tfplan -var-file=terraform.tfvars
	@echo "$(GREEN)‚úÖ Plan generated: environments/$(ENV)/terraform.tfplan$(RESET)"

apply: ## üöÄ Appliquer les changements planifi√©s
	@echo "$(CYAN)üöÄ Applying changes for $(ENV)$(RESET)"
	@if [ ! -f "environments/$(ENV)/terraform.tfplan" ]; then \
		echo "$(RED)‚ùå No plan found. Run 'make plan ENV=$(ENV)' first$(RESET)"; \
		exit 1; \
	fi
	@cd environments/$(ENV) && terraform apply terraform.tfplan
	@rm -f environments/$(ENV)/terraform.tfplan
	@echo "$(GREEN)‚úÖ Changes applied successfully$(RESET)"

deploy: plan apply ## üéØ D√©ployer (plan + apply) en une commande
	@echo "$(GREEN)‚úÖ Deployment completed for $(ENV)$(RESET)"

destroy: ## üí• D√©truire l'infrastructure (avec confirmation)
	@echo "$(RED)üí• WARNING: This will destroy ALL infrastructure for $(ENV)$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è  This action is IRREVERSIBLE$(RESET)"
	@read -p "Are you absolutely sure you want to destroy $(ENV)? Type 'yes' to confirm: " confirm; \
	if [ "$$confirm" = "yes" ]; then \
		echo "$(CYAN)üî• Destroying infrastructure for $(ENV)$(RESET)"; \
		cd environments/$(ENV) && terraform destroy -var-file=terraform.tfvars -auto-approve; \
		echo "$(GREEN)‚úÖ Infrastructure destroyed$(RESET)"; \
	else \
		echo "$(YELLOW)‚èπÔ∏è  Operation cancelled$(RESET)"; \
	fi

validate: ## ‚úÖ Valider la configuration Terraform
	@echo "$(CYAN)‚úÖ Validating Terraform configuration for $(ENV)$(RESET)"
	@cd environments/$(ENV) && terraform validate
	@cd environments/$(ENV) && terraform fmt -check=true -diff=true
	@echo "$(GREEN)‚úÖ Configuration is valid$(RESET)"

fmt: ## üé® Formatter le code Terraform
	@echo "$(CYAN)üé® Formatting Terraform code$(RESET)"
	@terraform fmt -recursive .
	@echo "$(GREEN)‚úÖ Code formatted$(RESET)"

security-scan: ## üõ° Scanner la s√©curit√© avec tfsec
	@echo "$(CYAN)üõ° Running security scan$(RESET)"
	@if ! command -v tfsec >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  tfsec not installed. Installing...$(RESET)"; \
		if command -v brew >/dev/null 2>&1; then \
			brew install tfsec; \
		else \
			echo "$(RED)‚ùå Please install tfsec manually: https://github.com/aquasecurity/tfsec$(RESET)"; \
			exit 1; \
		fi \
	fi
	@tfsec . --format=compact
	@echo "$(GREEN)‚úÖ Security scan completed$(RESET)"

costs: init ## üí∞ Estimer les co√ªts avec Infracost
	@echo "$(CYAN)üí∞ Estimating costs for $(ENV)$(RESET)"
	@if ! command -v infracost >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  Infracost not installed. Using basic Terraform plan$(RESET)"; \
		cd environments/$(ENV) && terraform plan -var-file=terraform.tfvars; \
	else \
		cd environments/$(ENV) && infracost breakdown --path .; \
	fi

outputs: ## üìä Afficher les outputs Terraform
	@echo "$(CYAN)üìä Terraform outputs for $(ENV)$(RESET)"
	@cd environments/$(ENV) && terraform output -json | jq '.'

state-list: ## üìã Lister les ressources dans le state
	@echo "$(CYAN)üìã Terraform state resources for $(ENV)$(RESET)"
	@cd environments/$(ENV) && terraform state list

refresh: ## üîÑ Refresh du state Terraform
	@echo "$(CYAN)üîÑ Refreshing Terraform state for $(ENV)$(RESET)"
	@cd environments/$(ENV) && terraform refresh -var-file=terraform.tfvars

import: ## üì• Importer une ressource existante
	@echo "$(CYAN)üì• Import existing resource$(RESET)"
	@echo "Usage: make import ENV=dev RESOURCE=aws_instance.example ID=i-1234567890abcdef0"
	@if [ -z "$(RESOURCE)" ] || [ -z "$(ID)" ]; then \
		echo "$(RED)‚ùå RESOURCE and ID parameters are required$(RESET)"; \
		exit 1; \
	fi
	@cd environments/$(ENV) && terraform import $(RESOURCE) $(ID)

unlock: ## üîì Forcer l'unlock du state (en cas de lock bloqu√©)
	@echo "$(YELLOW)‚ö†Ô∏è  Force unlocking Terraform state for $(ENV)$(RESET)"
	@read -p "Lock ID to unlock: " lock_id; \
	if [ -n "$$lock_id" ]; then \
		cd environments/$(ENV) && terraform force-unlock $$lock_id; \
	else \
		echo "$(RED)‚ùå Lock ID is required$(RESET)"; \
	fi

clean: ## üßπ Nettoyer les fichiers temporaires
	@echo "$(CYAN)üßπ Cleaning temporary files$(RESET)"
	@find . -name "*.tfplan" -delete
	@find . -name ".terraform.lock.hcl" -delete
	@find . -name "terraform.tfstate.backup" -delete
	@echo "$(GREEN)‚úÖ Temporary files cleaned$(RESET)"

docs: ## üìö G√©n√©rer la documentation des modules
	@echo "$(CYAN)üìö Generating module documentation$(RESET)"
	@if ! command -v terraform-docs >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  terraform-docs not installed$(RESET)"; \
		echo "Install with: brew install terraform-docs"; \
		exit 1; \
	fi
	@for module in modules/*/; do \
		echo "$(BLUE)üìù Generating docs for $$module$(RESET)"; \
		terraform-docs markdown table --output-file README.md $$module; \
	done
	@echo "$(GREEN)‚úÖ Documentation generated$(RESET)"

check-tools: ## üîç V√©rifier les outils requis
	@echo "$(CYAN)üîç Checking required tools$(RESET)"
	@echo -n "Terraform: "; terraform --version | head -n1 || echo "$(RED)‚ùå Not installed$(RESET)"
	@echo -n "AWS CLI: "; aws --version || echo "$(RED)‚ùå Not installed$(RESET)"
	@echo -n "jq: "; jq --version || echo "$(RED)‚ùå Not installed$(RESET)"
	@echo -n "GitHub CLI: "; gh --version || echo "$(RED)‚ùå Not installed (required for promotions)$(RESET)"
	@echo -n "tfsec: "; tfsec --version || echo "$(YELLOW)‚ö†Ô∏è  Not installed (optional)$(RESET)"
	@echo -n "terraform-docs: "; terraform-docs --version || echo "$(YELLOW)‚ö†Ô∏è  Not installed (optional)$(RESET)"
	@echo -n "infracost: "; infracost --version || echo "$(YELLOW)‚ö†Ô∏è  Not installed (optional)$(RESET)"

# Commandes sp√©cifiques aux environnements
dev: ENV=dev
dev: deploy ## üîß D√©ployer l'environnement dev

staging: ENV=staging
staging: deploy ## üé≠ D√©ployer l'environnement staging

prod: ENV=prod
prod: deploy ## üöÄ D√©ployer l'environnement prod

# Commandes de promotion et rollback
promote-staging: ## üöÄ Promouvoir une version vers staging
	@echo "$(CYAN)üöÄ Promoting version to staging$(RESET)"
	@read -p "Enter version tag to promote (e.g., v1.2.3): " version; \
	if [ -n "$$version" ]; then \
		echo "$(YELLOW)Triggering GitHub workflow to promote $$version to staging...$(RESET)"; \
		if command -v gh >/dev/null 2>&1; then \
			gh workflow run promote-staging.yml -f version=$$version; \
		else \
			echo "$(RED)‚ùå GitHub CLI not installed. Please install it or trigger the workflow manually.$(RESET)"; \
		fi; \
	else \
		echo "$(RED)‚ùå Version tag is required$(RESET)"; \
	fi

promote-prod: ## üöÄ Promouvoir une version vers production
	@echo "$(CYAN)üöÄ Promoting version to production$(RESET)"
	@read -p "Enter version tag to promote (e.g., v1.2.3): " version; \
	if [ -n "$$version" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  This will trigger deployment to PRODUCTION environment$(RESET)"; \
		read -p "Are you sure you want to continue? (yes/no): " confirm; \
		if [ "$$confirm" = "yes" ]; then \
			echo "$(YELLOW)Triggering GitHub workflow to promote $$version to production...$(RESET)"; \
			if command -v gh >/dev/null 2>&1; then \
				gh workflow run promote-prod.yml -f version=$$version -f approve=true; \
			else \
				echo "$(RED)‚ùå GitHub CLI not installed. Please install it or trigger the workflow manually.$(RESET)"; \
			fi; \
		else \
			echo "$(YELLOW)‚èπÔ∏è  Operation cancelled$(RESET)"; \
		fi; \
	else \
		echo "$(RED)‚ùå Version tag is required$(RESET)"; \
	fi

rollback: ## ‚èÆÔ∏è Rollback d'urgence
	@echo "$(RED)‚èÆÔ∏è  EMERGENCY ROLLBACK$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è  This will rollback an environment to a previous version$(RESET)"
	@read -p "Enter environment to rollback (dev/staging/prod): " env; \
	read -p "Enter version tag to rollback to (e.g., v1.2.2): " version; \
	if [ -n "$$env" ] && [ -n "$$version" ]; then \
		if [ "$$env" = "prod" ]; then \
			echo "$(RED)‚ö†Ô∏è  WARNING: You are about to rollback the PRODUCTION environment!$(RESET)"; \
			read -p "Type 'CONFIRM ROLLBACK' to proceed: " confirm; \
			if [ "$$confirm" != "CONFIRM ROLLBACK" ]; then \
				echo "$(YELLOW)‚èπÔ∏è  Rollback cancelled$(RESET)"; \
				exit 1; \
			fi; \
		fi; \
		echo "$(YELLOW)Triggering GitHub workflow for rollback...$(RESET)"; \
		if command -v gh >/dev/null 2>&1; then \
			gh workflow run rollback.yml -f environment=$$env -f version=$$version; \
		else \
			echo "$(RED)‚ùå GitHub CLI not installed. Please install it or trigger the workflow manually.$(RESET)"; \
		fi; \
	else \
		echo "$(RED)‚ùå Both environment and version tag are required$(RESET)"; \
	fi

# Commande pour cr√©er un nouveau tag de version
tag-version: ## üè∑Ô∏è Cr√©er un nouveau tag de version
	@echo "$(CYAN)üè∑Ô∏è Creating new version tag$(RESET)"
	@read -p "Enter new version (e.g., v1.2.3): " version; \
	if [ -n "$$version" ]; then \
		echo "$(YELLOW)Creating git tag $$version...$(RESET)"; \
		git tag -a $$version -m "Release $$version"; \
		git push origin $$version; \
		echo "$(GREEN)‚úÖ Tag $$version created and pushed$(RESET)"; \
	else \
		echo "$(RED)‚ùå Version is required$(RESET)"; \
	fi

# Targets sp√©ciaux
.DEFAULT_GOAL := help